<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="ExecDirect" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <Command ParameterType="System.String" Required="true" />
      <Arguments ParameterType="System.String" Required="true" />
      <ExitCode ParameterType="System.Int32" Output="true" />
      <ConsoleOutput ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.Diagnostics"/>
      <Code Type="Fragment" Language="cs">
        var process = new Process();
        process.StartInfo.FileName = Command;
        process.StartInfo.Arguments = Arguments;
        process.StartInfo.CreateNoWindow = true;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.RedirectStandardOutput = true;
        process.Start();
	     
		// Synchronously read the standard output of the spawned process.
		// Read must be done before waiting for exit code to avoid deadlocks
		ConsoleOutput = process.StandardOutput.ReadToEnd().Trim('\r', '\n');
		
        process.WaitForExit();
		ExitCode = process.ExitCode;
		process.Close();
		
        if (!string.IsNullOrWhiteSpace(ConsoleOutput))
        {
		  foreach (var outputLine in ConsoleOutput.Split('\n'))
          {
		    Log.LogError(outputLine);
		  }
        }
      </Code>
    </Task>
  </UsingTask>

  <Target
    AfterTargets="CompileTypeScript"
	Condition="('@(TSLintInclude)' != '' or '@(TypeScriptCompile)' != '') and ('$(BuildingProject)' == 'true' or '$(TSLintRunWhenNotBuilding)' == 'true')"
    Inputs="@(TSLintInclude);@(TypeScriptCompile)"
    Name="TSLint"
    Outputs="$([System.DateTime]::UtcNow.Ticks)">

	<Message Text="Running TSLint..." Importance="high" />

    <ItemGroup Condition="'$(TSLintExcludeTypeScriptCompile)' != 'true'">
      <TSLintInclude Include="@(TypeScriptCompile)" />
    </ItemGroup>

    <PropertyGroup>
      <TSLintBreakBuildOnError Condition="'$(TSLintBreakBuildOnError)' == ''">false</TSLintBreakBuildOnError>
      <TSLintFormat Condition="'$(TSLintFormat)' == ''">msbuild</TSLintFormat>
      <TSLintNodeExe Condition="'$(TSLintNodeExe)' == ''">$([System.IO.Path]::GetFullPath("$(MSBuildThisFileDirectory)..\tools\node-7.3.0.exe"))</TSLintNodeExe>
      <TSLintTimeout Condition="'$(TSLintTimeout)' == ''">10000000</TSLintTimeout>
      <TSLintVersion Condition="'$(TSLintVersion)' == ''">*.*.*</TSLintVersion>
    </PropertyGroup>

    <!-- Grab the first matching TSLint CLI in a NuGet packages install -->
    <ItemGroup Condition="'$(TSLintCli)' == ''">
      <TSLintPotentialCli Include="$(SolutionDir)packages\tslint.$(TSLintVersion)\tools\node_modules\tslint\lib\tslint-cli.js" />
      <TSLintPotentialCli Include="$(MSBuildThisFileDirectory)..\..\tslint.$(TSLintVersion)\tools\node_modules\tslint\lib\tslint-cli.js" />
      <TSLintPotentialCli Include="$(ProjectDir)node_modules\tslint\bin\tslint" />
    </ItemGroup>
    <PropertyGroup Condition="'$(TSLintCli)' == ''">
      <TSLintCliProperty>@(TSLintPotentialCli);</TSLintCliProperty>
      <TSLintCli>$(TSLintCliProperty.Substring(0, $(TSLintCliProperty.IndexOf(';'))))</TSLintCli>
    </PropertyGroup>

    <!-- TSLintExclude might include special characters, so those should be escaped -->
    <PropertyGroup>
      <TSLintExclude Condition="'@(TSLintExclude)' != ''">@(TSLintExclude.Replace("*", "%2A"))</TSLintExclude>
      <TSLintExclude Condition="'@(TSLintExclude)' != ''">@(TSLintExclude.Replace(".", "%2E"))</TSLintExclude>
      <TSLintExcludeJoined Condition="'@(TSLintExclude)' != ''">@(TSLintExclude, '" --exclude "')</TSLintExcludeJoined>
    </PropertyGroup>

    <!-- Build the TSLint arguments -->
    <PropertyGroup>
      <TSLintArgs></TSLintArgs>
      <TSLintArgs Condition="'$(TSLintConfig)' != ''">$(TSLintArgs) --config "$(TSLintConfig)"</TSLintArgs>
      <TSLintArgs Condition="'@(TSLintExclude)' != ''">$(TSLintArgs) --exclude "$(TSLintExcludeJoined)"</TSLintArgs>
      <TSLintArgs>$(TSLintArgs) --format "$(TSLintFormat)"</TSLintArgs>
      <TSLintArgs Condition="'$(TSLintProject)' != ''">$(TSLintArgs) --project "$(TSLintProject)"</TSLintArgs>
      <TSLintArgs Condition="'$(TSLintTypeCheck)' != ''">$(TSLintArgs) --type-check "$(TSLintTypeCheck)"</TSLintArgs>
      <TSLintArgs Condition="'@(TSLintRulesDirectory)' != ''">$(TSLintArgs) --rules-dir "@(TSLintRulesDirectory, '" --rules-dir "')"</TSLintArgs>
      <TSLintArgs Condition="'$(TSLintExtraArgs)' != ''">$(TSLintArgs) $(TSLintExtraArgs)</TSLintArgs>
      <TSLintArgs Condition="'$(TSLintFileListDisabled)' != 'true' And '@(TSLintInclude)' != ''">$(TSLintArgs) "@(TSLintInclude, '" "')"</TSLintArgs>
    </PropertyGroup>

    <Error Condition="'$(TSLintFileListDisabled)' == 'true' And '$(TSLintProject)' == ''" Text="You disabled file listing on the command line using TSLintFileDisabled, but did not specify a project file with TSLintProject." />

    <!-- Run TSLint using the Node executable -->
    <ExecDirect
        Command="&quot;$(TSLintNodeExe)&quot;"
        Arguments="&quot;$(TSLintCli)&quot; $(TSLintArgs)">
        <Output TaskParameter="ConsoleOutput" PropertyName="TSLintOutput" />
        <Output TaskParameter="ExitCode" PropertyName="TSLintErrorCode" />
    </ExecDirect>

    <!-- Return an error if TSLint returned an exit code and we should break on errors -->
    <Error Condition="'$(TSLintErrorCode)' != '0' and '$(TSLintBreakBuildOnError)' == 'true'" Text="TSLint failed" />
  </Target>
</Project>
